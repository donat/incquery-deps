/**
 */
package hu.bme.incquery.deps.cp3model.provider;

import hu.bme.incquery.deps.cp3model.util.Cp3modelAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class Cp3modelItemProviderAdapterFactory extends Cp3modelAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Cp3modelItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.incquery.deps.cp3model.CP3Dep} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CP3DepItemProvider cp3DepItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.incquery.deps.cp3model.CP3Dep}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCP3DepAdapter() {
		if (cp3DepItemProvider == null) {
			cp3DepItemProvider = new CP3DepItemProvider(this);
		}

		return cp3DepItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.incquery.deps.cp3model.CP3Repo} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CP3RepoItemProvider cp3RepoItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.incquery.deps.cp3model.CP3Repo}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCP3RepoAdapter() {
		if (cp3RepoItemProvider == null) {
			cp3RepoItemProvider = new CP3RepoItemProvider(this);
		}

		return cp3RepoItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.incquery.deps.cp3model.CP3Project} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CP3ProjectItemProvider cp3ProjectItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.incquery.deps.cp3model.CP3Project}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCP3ProjectAdapter() {
		if (cp3ProjectItemProvider == null) {
			cp3ProjectItemProvider = new CP3ProjectItemProvider(this);
		}

		return cp3ProjectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.incquery.deps.cp3model.CP3Class} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CP3ClassItemProvider cp3ClassItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.incquery.deps.cp3model.CP3Class}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCP3ClassAdapter() {
		if (cp3ClassItemProvider == null) {
			cp3ClassItemProvider = new CP3ClassItemProvider(this);
		}

		return cp3ClassItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.incquery.deps.cp3model.CP3Method} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CP3MethodItemProvider cp3MethodItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.incquery.deps.cp3model.CP3Method}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCP3MethodAdapter() {
		if (cp3MethodItemProvider == null) {
			cp3MethodItemProvider = new CP3MethodItemProvider(this);
		}

		return cp3MethodItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.incquery.deps.cp3model.CP3Field} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CP3FieldItemProvider cp3FieldItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.incquery.deps.cp3model.CP3Field}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCP3FieldAdapter() {
		if (cp3FieldItemProvider == null) {
			cp3FieldItemProvider = new CP3FieldItemProvider(this);
		}

		return cp3FieldItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (cp3DepItemProvider != null) cp3DepItemProvider.dispose();
		if (cp3RepoItemProvider != null) cp3RepoItemProvider.dispose();
		if (cp3ProjectItemProvider != null) cp3ProjectItemProvider.dispose();
		if (cp3ClassItemProvider != null) cp3ClassItemProvider.dispose();
		if (cp3MethodItemProvider != null) cp3MethodItemProvider.dispose();
		if (cp3FieldItemProvider != null) cp3FieldItemProvider.dispose();
	}

}
