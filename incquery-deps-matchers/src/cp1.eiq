//------------------------------------------------------------------------------
// Created by: Donat Csikos
//
// Notes:
// 1) Notation:  
// 		cp1model, repo model or Repository model: contains information form all projects.
// 		wsmodel or workspace model: holds structure of the traced projects in the workspace.
//------------------------------------------------------------------------------
package cern.devtools.deps.query.cp1

import "http://inf.mit.bme.hu/donat/incquery-deps/wsmodel"
import "http://inf.mit.bme.hu/donat/incquery-deps/cp1model"
import "http://www.eclipse.org/emf/2002/Ecore"
    
   

/**
 * Finds projects in the models with the same names,
 */
pattern projectsWithSameName(repoProject : CP1Project, wsProject : WProject) = {
	CP1Project.name(repoProject, commonName);
	WProject.name(wsProject, commonName);
}

 
 /**
  * Finds all the defined types in the container project.
  */
pattern typesInWsProject(wsType : WType, wsProject: WProject) = {
	WProject.packageFragmentRoots.packageFragments.compilationUnits.types(wsProject, wsType);
}


pattern methodsInWsType(wsMethod : WMethod, wsType : WType) = {
	WType.methods(wsType, wsMethod);	
}

pattern fieldsInWsType(wsField: WField, wsType : WType) = {
	WType.fields(wsType, wsField);	
}


/**
 * Matches all the classes in the workspace which does not exist in the repository.
 */
pattern addedClasses(wsClass : WType) = {
	// Find the following attributes for the selected type: package name, simple name, project.
	WPackageFragment.compilationUnits.types(wsPackage, wsClass);
	WPackageFragment.name(wsPackage, packageName);
	WType.name(wsClass, simpleName);
	WProject.packageFragmentRoots.packageFragments.compilationUnits.types(wsProject, wsClass);

	// Find the project in the repository.
	find projectsWithSameName(repoProject, wsProject);

	// Check that the repository project does not contain a class with the same name.
	neg find classNamesInRepoProjects(repoProject, packageName, simpleName);
}

/**
 * Matches all the classes in the repository which has been deleted from the workspace.
 */
pattern removedClassesFromProject(repoClass : CP1Class, repoProject : CP1Project) = {
	CP1Class.simpleName(repoClass, simpleName);
	CP1Class.packageName(repoClass, packageName);
	CP1Project.classes(repoProject, repoClass);

	// Find the project in the workspace.
	find projectsWithSameName(repoProject, wsProject);

	// Check that the workspace does not contain a class with the same name.
	neg find classNamesInWorkspaceProjects(wsProject, packageName, simpleName);
}

// ----------------------------------------------------------------------------
// 1) Join queries
// ----------------------------------------------------------------------------



/*
 * Finds correspondent classes in the models.
 */
pattern classesWithSameFQNAndSameProject(repoClass : CP1Class, wsClass : WType) = {
	// Pattern applies only classes within a project with the same name.
	CP1Project.classes(repoProject, repoClass);
	WProject.packageFragmentRoots.packageFragments.compilationUnits.types(wsProject, wsClass);
	find projectsWithSameName(repoProject, wsProject);

	// Classes must have the same name...
	CP1Class.simpleName(repoClass, commonSimpleName);
	WType.name(wsClass, commonSimpleName);

	// ... and the same package name.
	CP1Class.packageName(repoClass, commonPackageName);
	WPackageFragment.compilationUnits.types(wsClassContPkg, wsClass);
	WPackageFragment.name(wsClassContPkg, commonPackageName);
}

/**
 * Finds correspondent methods in the models. 
 */
pattern methodsWithSameSignatureAndSameProject(repoMethod : CP1Method, wsMethod : WMethod) = {
	// Find the items contained by the same named projects.
	CP1Project.classes.methods(repoProject, repoMethod);
	WProject.packageFragmentRoots.packageFragments.compilationUnits.types.methods(wsProject, wsMethod);
	find projectsWithSameName(repoProject, wsProject);

	// Join the methods by signature.
	CP1Method.signature(repoMethod, commonSignature);
	WMethod.signature(wsMethod, commonSignature);
}

/**
 * Finds correspondent fields in the models. 
 */
pattern fieldsWithSameSignatureAndSameProject(repoField : CP1Field, wsField : WField) = {
	// Find the items contained by the same named projects.
	CP1Project.classes.fields(repoProject, repoField);
	WProject.packageFragmentRoots.packageFragments.compilationUnits.types.fields(wsProject, wsField);
	find projectsWithSameName(repoProject, wsProject);

	// Join the fields by signature.
	CP1Field.signature(repoField, commonSignature);
	WField.signature(wsField, commonSignature);
}

// ----------------------------------------------------------------------------
// 2) Incoming dependencies
// ----------------------------------------------------------------------------

/**
 * Finds all items in the repository which inherits from a class in the workspace.
 */
pattern incomingInheritances(repoSource : CP1Class, wsTarget : WType) = {
	// Find equal classes in the two models. 
	find classesWithSameFQNAndSameProject(repoTarget, wsTarget);

	// Join on dependencies.
	CP1Dependency(dependency);
	CP1Dependency.from(dependency, repoSource);
	CP1Dependency.to(dependency, repoTarget);

	// Select only the inheritance dependencies.
	CP1Dependency.type(dependency, CP1DependencyType::INHERITANCE);
}

/**
 * Finds all classes in the repository which has a references to a class in the workspace.
 */
pattern incomingClassUsages(repoSource : CP1Class, wsTarget : WType) = {
	// Find equal classes in the two models. 
	find classesWithSameFQNAndSameProject(repoTarget, wsTarget);

	// Join on dependencies.
	CP1Dependency(dependency);
	CP1Dependency.from(dependency, repoSource);
	CP1Dependency.to(dependency, repoTarget);

	// Select only the clasas usage dependencies.
	CP1Dependency.type(dependency, CP1DependencyType::CLASS_USAGE);
}

/**
 * Finds all methods in the workspace which is called by an external method.
 */
pattern incomingMethodCalls(repoSource : CP1Method, wsTarget : WMethod) = {
	// Join the methods.
	find methodsWithSameSignatureAndSameProject(repoTarget, wsTarget);

	// Join on dependencies.
	CP1Dependency(dependency);
	CP1Dependency.from(dependency, repoSource);
	CP1Dependency.to(dependency, repoTarget);

	// Select only the classes usage dependencies.
	CP1Dependency.type(dependency, CP1DependencyType::METHOD_CALL);
}

/**
 * Finds all methods in the workspace which is overridden by an external method.
 */
pattern incomingMethodOverrides(repoSource : CP1Method, wsTarget : WMethod) = {
	// Join the methods.
	find methodsWithSameSignatureAndSameProject(repoTarget, wsTarget);

	// Join on dependencies.
	CP1Dependency(dependency);
	CP1Dependency.from(dependency, repoSource);
	CP1Dependency.to(dependency, repoTarget);

	// Select only the classes usage dependencies.
	CP1Dependency.type(dependency, CP1DependencyType::METHOD_OVERRIDE);
}

/**
 * Finds all fields in the workspace which is accessed by an external method.
 */
pattern incomingFieldAccesses(repoSource : CP1Method, wsTarget : WField) = {
// Join the fields.
	find fieldsWithSameSignatureAndSameProject(repoTarget, wsTarget);

	// Join on dependencies.
	CP1Dependency(dependency);
	CP1Dependency.from(dependency, repoSource);
	CP1Dependency.to(dependency, repoTarget);

	// Select only the classes usage dependencies.
	CP1Dependency.type(dependency, CP1DependencyType::FIELD_REFERENCE);
}

// ----------------------------------------------------------------------------
// 3) Delta queries
// ----------------------------------------------------------------------------



/**
 * Matches for all class names in the repository projects.
 */
private pattern classNamesInRepoProjects(repoProject, packageName, simpleName) = {
	CP1Project(repoProject);
	CP1Project.classes(repoProject, repoClass);
	CP1Class.packageName(repoClass, packageName);
	CP1Class.simpleName(repoClass, simpleName);
}

/**
 * Matches all the classes in the repository which has been deleted from the workspace.
 */
pattern removedClasses(wsClass : CP1Class) = {
	CP1Class.simpleName(wsClass, simpleName);
	CP1Class.packageName(wsClass, packageName);
	CP1Project.classes(repoProject, wsClass);

	// Find the project in the workspace.
	find projectsWithSameName(repoProject, wsProject);

	// Check that the workspace does not contain a class with the same name.
	neg find classNamesInWorkspaceProjects(wsProject, packageName, simpleName);
}

/**
 * Matches for all class names in the workspace projects.
 */
private pattern classNamesInWorkspaceProjects(wsProject, packageName, simpleName) = {
	WType(wsClass);
	WProject.packageFragmentRoots.packageFragments.compilationUnits.types(wsProject, wsClass);
	WPackageFragment.compilationUnits.types(wsPackage, wsClass);
	WPackageFragment.name(wsPackage, packageName);
	WType.name(wsClass, simpleName);
}
/**
 * Matches all methods in the workspace which does not exist in the repository.
 */
pattern addedMethods(wsMethod : WMethod, wsClass: WType) = {
	// Find the method's project.
	WMethod.signature(wsMethod, signature);
	WProject.packageFragmentRoots.packageFragments.compilationUnits.types.methods(wsProject, wsMethod);

	//Assign the type to the class.
	WType.methods(wsClass, wsMethod);

	// Find the project in the repository.
	find projectsWithSameName(repoProject, wsProject);

	// Ensure that the method does not exist in the selected repository project.
	neg find methodSignaturesInRepoProjects(repoProject, signature);
}

/**
 * Matches all method signatures in the repository projects.
 */
private pattern methodSignaturesInRepoProjects(repoProject, signature) = {
	CP1Project(repoProject);
	CP1Project.classes.methods.signature(repoProject, signature);
}

/**
 * Matches all methods in the repository which has been deleted from the workspace.
 */
pattern removedMethod(repoMethod : CP1Method) = {
	// Find the method's project
	CP1Method.signature(repoMethod, signature);
	CP1Project.classes.methods(repoProject, repoMethod);

	// Find the project in the workspace.
	find projectsWithSameName(repoProject, wsProject);

	// The workspace project is missing.
	neg find methodSignaturesInWorkspaceProjects(wsProject, signature);

	// Bugfix: remove static initialiser methods.
	check(! signature.contains("<clinit>"));
}

/**
 * Matches all method signatures in the workspace projects projects.
 */
private pattern methodSignaturesInWorkspaceProjects(wsProject, signature) = {
	WProject(wsProject);
	WProject.packageFragmentRoots.packageFragments.compilationUnits.types.methods.signature(wsProject, signature);
}

/**
 * Matches all fields in the workspace which does not exist in the repository.
 */
pattern addedFields(wsField : WField) = {
	// Find the field's project
	WField.signature(wsField, signature);
	WProject.packageFragmentRoots.packageFragments.compilationUnits.types.fields(wsProject, wsField);

	// Find the project in the repository.
	find projectsWithSameName(repoProject, wsProject);

	// Ensure that the field does not exist in the selected repository project.
	neg find fieldSignaturesInRepoProjects(repoProject, signature);
}

private pattern fieldSignaturesInRepoProjects(repoProject, signature) = {
	CP1Project(repoProject);
	CP1Project.classes.fields.signature(repoProject, signature);
}

pattern removedFields(repoField : CP1Field) = {
	CP1Field.signature(repoField, signature);
	CP1Project.classes.fields(repoProject, repoField);

	find projectsWithSameName(repoProject, wsProject);
	neg find fieldSignaturesInWorkspaceProjects(wsProject, signature);
}

/**
 * Matches all method signatures in the workspace projects projects.
 */
private pattern fieldSignaturesInWorkspaceProjects(wsProject, signature) = {
	WProject(wsProject);
	WProject.packageFragmentRoots.packageFragments.compilationUnits.types.fields.signature(wsProject, signature);
}

// ----------------------------------------------------------------------------
// 4) Impact analysis
// ----------------------------------------------------------------------------

/**
 * Returns all the fields which were removed and all the external methods, which accesses to it.
 */
pattern impactCausedByRemovedFields(repoFrom : CP1Method, repoTo : CP1Field, type : CP1DependencyType) = {
	find removedFields(repoTo);
	CP1Dependency.from(d, repoFrom);
	CP1Dependency.to(d, repoTo);
	CP1Dependency.type(d, ::FIELD_REFERENCE);
	CP1Dependency.type(d, type);
}

/**
 * Returns all the methods which were removed and all the methods, which call or override it.
 */
pattern impactCausedByRemovedMethods(repoFrom : CP1Method, repoTo : CP1Method, type : CP1DependencyType) = {
	// method call
	find removedMethod(repoTo);
	CP1Dependency.from(d, repoFrom);
	CP1Dependency.to(d, repoTo);
	CP1Dependency.type(d, ::METHOD_CALL);
	CP1Dependency.type(d, type);
} or {
	// or method override
	find removedMethod(repoTo);
	CP1Dependency.from(d, repoFrom);
	CP1Dependency.to(d, repoTo);
	CP1Dependency.type(d, ::METHOD_OVERRIDE);
	CP1Dependency.type(d, type);
}

pattern impactCausedByRemovedClasses(repoFrom : CP1Class, repoTo : CP1Class, type : CP1DependencyType) = {
	// class usage.
	find removedClasses(repoTo);
	CP1Dependency.from(d, repoFrom);
	CP1Dependency.to(d, repoTo);
	CP1Dependency.type(d, ::CLASS_USAGE);
	CP1Dependency.type(d, type);
} or {
	// or inheritance
	find removedClasses(repoTo);
	CP1Dependency.from(d, repoFrom);
	CP1Dependency.to(d, repoTo);
	CP1Dependency.type(d, ::INHERITANCE);
	CP1Dependency.type(d, type);
}
