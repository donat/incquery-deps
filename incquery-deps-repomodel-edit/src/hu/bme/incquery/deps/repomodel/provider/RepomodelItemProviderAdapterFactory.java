/**
 */
package hu.bme.incquery.deps.repomodel.provider;

import hu.bme.incquery.deps.repomodel.util.RepomodelAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class RepomodelItemProviderAdapterFactory extends RepomodelAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public RepomodelItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.incquery.deps.repomodel.RProject} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RProjectItemProvider rProjectItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.incquery.deps.repomodel.RProject}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRProjectAdapter() {
		if (rProjectItemProvider == null) {
			rProjectItemProvider = new RProjectItemProvider(this);
		}

		return rProjectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.incquery.deps.repomodel.RClass} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RClassItemProvider rClassItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.incquery.deps.repomodel.RClass}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRClassAdapter() {
		if (rClassItemProvider == null) {
			rClassItemProvider = new RClassItemProvider(this);
		}

		return rClassItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.incquery.deps.repomodel.RMethod} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RMethodItemProvider rMethodItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.incquery.deps.repomodel.RMethod}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRMethodAdapter() {
		if (rMethodItemProvider == null) {
			rMethodItemProvider = new RMethodItemProvider(this);
		}

		return rMethodItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.incquery.deps.repomodel.RField} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RFieldItemProvider rFieldItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.incquery.deps.repomodel.RField}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRFieldAdapter() {
		if (rFieldItemProvider == null) {
			rFieldItemProvider = new RFieldItemProvider(this);
		}

		return rFieldItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.incquery.deps.repomodel.RDependency} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RDependencyItemProvider rDependencyItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.incquery.deps.repomodel.RDependency}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRDependencyAdapter() {
		if (rDependencyItemProvider == null) {
			rDependencyItemProvider = new RDependencyItemProvider(this);
		}

		return rDependencyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.incquery.deps.repomodel.RRepository} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RRepositoryItemProvider rRepositoryItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.incquery.deps.repomodel.RRepository}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRRepositoryAdapter() {
		if (rRepositoryItemProvider == null) {
			rRepositoryItemProvider = new RRepositoryItemProvider(this);
		}

		return rRepositoryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.incquery.deps.repomodel.RTransitiveDependency} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RTransitiveDependencyItemProvider rTransitiveDependencyItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.incquery.deps.repomodel.RTransitiveDependency}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRTransitiveDependencyAdapter() {
		if (rTransitiveDependencyItemProvider == null) {
			rTransitiveDependencyItemProvider = new RTransitiveDependencyItemProvider(this);
		}

		return rTransitiveDependencyItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (rProjectItemProvider != null) rProjectItemProvider.dispose();
		if (rClassItemProvider != null) rClassItemProvider.dispose();
		if (rMethodItemProvider != null) rMethodItemProvider.dispose();
		if (rFieldItemProvider != null) rFieldItemProvider.dispose();
		if (rDependencyItemProvider != null) rDependencyItemProvider.dispose();
		if (rRepositoryItemProvider != null) rRepositoryItemProvider.dispose();
		if (rTransitiveDependencyItemProvider != null) rTransitiveDependencyItemProvider.dispose();
	}

}
